// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "moecods.dev@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/participants/answers": {
            "post": {
                "description": "Save participants answers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "participants"
                ],
                "summary": "Save participants answers",
                "parameters": [
                    {
                        "description": "Save participants answers Request object",
                        "name": "SaveParticipantsAnswersRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/participant.SaveParticipantsAnswersRequest"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Participant Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to read request body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/participants/register": {
            "post": {
                "description": "Register participants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "participants"
                ],
                "summary": "Register participants",
                "parameters": [
                    {
                        "description": "Register Request object",
                        "name": "RegisterRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/participant.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to read request body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quizzes": {
            "get": {
                "description": "get list of quizzes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "get list of quizzes",
                "responses": {}
            },
            "post": {
                "description": "Add an quiz",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Add a quiz",
                "parameters": [
                    {
                        "description": "Quiz object",
                        "name": "quiz",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/quiz.Quiz"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to read request body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quizzes/{id}": {
            "get": {
                "description": "get string by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Show an quiz",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "description": "Update an existing quiz by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Update a quiz",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Quiz object",
                        "name": "quiz",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/quiz.Quiz"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quiz.Quiz"
                        }
                    },
                    "400": {
                        "description": "Invalid quiz ID or request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete an quiz",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "delete a quiz",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quizzes/{id}/participants": {
            "get": {
                "description": "get list of participants participated in specific quiz",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "get list of participants participated in specific quiz",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "participant.Answer": {
            "type": "object",
            "properties": {
                "answer_text": {
                    "type": "string"
                },
                "answered_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "string"
                },
                "selection_option": {
                    "type": "integer"
                }
            }
        },
        "participant.ParticipantAnswer": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/participant.Answer"
                    }
                },
                "participant_id": {
                    "type": "string"
                }
            }
        },
        "participant.RegisterRequest": {
            "type": "object",
            "properties": {
                "number_of_participants": {
                    "type": "integer"
                },
                "quiz_id": {
                    "type": "string"
                }
            }
        },
        "participant.SaveParticipantsAnswersRequest": {
            "type": "object",
            "properties": {
                "participant_answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/participant.ParticipantAnswer"
                    }
                }
            }
        },
        "quiz.Question": {
            "type": "object",
            "properties": {
                "correct_option": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of question: \"descriptive\" or \"multiple-choice\"",
                    "type": "string"
                }
            }
        },
        "quiz.Quiz": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string",
                    "example": "2024-07-30T12:00:00Z"
                },
                "id": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/quiz.Question"
                    }
                },
                "start_at": {
                    "type": "string",
                    "example": "2024-07-30T12:00:00Z"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8020",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
